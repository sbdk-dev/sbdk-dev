# This workflow will:
# 1. Upload a Python Package to PyPI when a release is created
# 2. Build standalone binaries for Windows, macOS, and Linux
# 3. Upload binaries to the GitHub Release

name: Build, Publish, and Release

on:
  release:
    types: [published]
  # Allow manual trigger for testing
  workflow_dispatch:
    inputs:
      test_release:
        description: 'Test release (no PyPI publish)'
        required: false
        type: boolean
        default: true

permissions:
  contents: write  # Need write permission to upload release assets
  id-token: write  # Needed for PyPI trusted publishing

jobs:
  # Build Python package distributions
  release-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install build tools
        run: |
          pip install --upgrade pip
          pip install build wheel

      - name: Build release distributions
        run: |
          python -m build
          ls -la dist/

      - name: Upload distributions
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  # Build standalone binaries for each platform
  build-binaries:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: linux
            binary_name: sbdk
            asset_name: sbdk-linux-x86_64
          - os: windows-latest
            name: windows
            binary_name: sbdk.exe
            asset_name: sbdk-windows-x86_64.exe
          - os: macos-latest
            name: macos
            binary_name: sbdk
            asset_name: sbdk-macos-universal

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          
      - name: Install dependencies
        run: |
          uv sync --extra dev
          uv pip install pyinstaller
      
      - name: Build binary with PyInstaller
        run: |
          uv run pyinstaller --onefile --name sbdk --add-data "sbdk/templates:sbdk/templates" --add-data "README.md:." --hidden-import typer --hidden-import rich --hidden-import duckdb --hidden-import pandas --hidden-import faker --hidden-import dlt --hidden-import dbt.core --hidden-import dbt.adapters.duckdb --hidden-import fastapi --hidden-import uvicorn --hidden-import watchdog sbdk/cli/main.py
      
      - name: Test binary
        run: |
          ./dist/${{ matrix.binary_name }} version
          ./dist/${{ matrix.binary_name }} --help
        shell: bash
      
      - name: Compress binary (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          cd dist
          tar -czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.binary_name }}
          ls -la
      
      - name: Compress binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd dist
          Compress-Archive -Path ${{ matrix.binary_name }} -DestinationPath ${{ matrix.asset_name }}.zip
          dir
      
      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.name }}
          path: |
            dist/${{ matrix.asset_name }}.*

  # Publish to PyPI
  pypi-publish:
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && !inputs.test_release)
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      id-token: write

    environment:
      name: pypi
      url: https://pypi.org/project/sbdk-dev

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  # Upload binaries to GitHub Release
  upload-release-assets:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs:
      - build-binaries
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
      
      - name: Display structure of downloaded files
        run: ls -la artifacts/*/
      
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/binary-linux/*.tar.gz
            artifacts/binary-windows/*.zip
            artifacts/binary-macos/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
