{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.6", "generated_at": "2025-07-31T21:56:51.714690Z", "invocation_id": "8a6d0ab1-9a5b-449c-9469-3d9a45ebb12d", "invocation_started_at": "2025-07-31T21:56:49.916419Z", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-31T21:56:51.487583Z", "completed_at": "2025-07-31T21:56:51.492659Z"}, {"name": "execute", "started_at": "2025-07-31T21:56:51.492914Z", "completed_at": "2025-07-31T21:56:51.543719Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.056858062744140625, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sbdk_project.stg_events", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select * from main.raw_events\n),\n\ncleaned as (\n    select\n        event_id,\n        user_id,\n        session_id,\n        event_type,\n        timestamp,\n        utm_source,\n        utm_medium,\n        utm_campaign,\n        page_url,\n        referrer_url,\n        user_agent,\n        ip_address,\n        country,\n        device_type,\n        browser,\n        os,\n        screen_resolution,\n        is_mobile,\n        duration_seconds,\n        revenue,\n        \n        -- Calculated fields\n        date(timestamp) as event_date,\n        extract(hour from timestamp) as event_hour,\n        extract(dow from timestamp) as day_of_week,\n        \n        case \n            when event_type in ('signup', 'purchase') then true\n            else false \n        end as is_conversion_event,\n        \n        case \n            when utm_source in ('google', 'bing') then 'search'\n            when utm_source in ('facebook', 'instagram', 'twitter', 'linkedin') then 'social'\n            when utm_source = 'email' then 'email'\n            when utm_source = 'direct' then 'direct'\n            else 'other'\n        end as traffic_category,\n        \n        -- Session indicators\n        case \n            when session_id is not null then true\n            else false \n        end as has_session_tracking,\n        \n        -- Revenue events\n        case \n            when revenue > 0 then true\n            else false \n        end as is_revenue_event\n        \n    from source_data\n    where timestamp is not null\n      and user_id is not null\n      and event_type is not null\n)\n\nselect * from cleaned", "relation_name": "\"dev\".\"main\".\"stg_events\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-31T21:56:51.546676Z", "completed_at": "2025-07-31T21:56:51.548358Z"}, {"name": "execute", "started_at": "2025-07-31T21:56:51.548555Z", "completed_at": "2025-07-31T21:56:51.558936Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012921810150146484, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sbdk_project.stg_orders", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select * from main.raw_orders\n),\n\ncleaned as (\n    select\n        order_id,\n        user_id,\n        order_number,\n        created_at,\n        completed_at,\n        status,\n        product_category,\n        product_sku,\n        quantity,\n        unit_price,\n        subtotal,\n        discount_amount,\n        discount_code,\n        tax_amount,\n        total_amount,\n        currency,\n        payment_method,\n        payment_processor,\n        billing_country,\n        billing_state,\n        billing_city,\n        billing_postal_code,\n        is_recurring,\n        subscription_period,\n        utm_source,\n        utm_campaign,\n        referral_code,\n        customer_notes,\n        shipping_required,\n        shipping_cost,\n        estimated_delivery,\n        \n        -- Calculated fields\n        date(created_at) as order_date,\n        extract(hour from created_at) as order_hour,\n        extract(dow from created_at) as day_of_week,\n        extract(month from created_at) as order_month,\n        extract(year from created_at) as order_year,\n        \n        case \n            when completed_at is not null \n            then date_diff('hour', created_at, completed_at)\n            else null \n        end as hours_to_completion,\n        \n        case \n            when discount_amount > 0 then true\n            else false \n        end as has_discount,\n        \n        case \n            when discount_amount > 0 \n            then round(discount_amount / subtotal * 100, 2)\n            else 0 \n        end as discount_percentage,\n        \n        case \n            when status = 'completed' then true\n            else false \n        end as is_completed,\n        \n        case \n            when status in ('cancelled', 'refunded') then true\n            else false \n        end as is_failed,\n        \n        case \n            when total_amount >= 100 then 'high_value'\n            when total_amount >= 50 then 'medium_value'\n            else 'low_value'\n        end as order_value_tier,\n        \n        -- Payment categorization\n        case \n            when payment_method in ('credit_card', 'stripe') then 'card'\n            when payment_method in ('paypal', 'bank_transfer') then 'alternative'\n            when payment_method = 'crypto' then 'crypto'\n            else 'other'\n        end as payment_category\n        \n    from source_data\n    where created_at is not null\n      and user_id is not null\n      and total_amount > 0\n)\n\nselect * from cleaned", "relation_name": "\"dev\".\"main\".\"stg_orders\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-31T21:56:51.560892Z", "completed_at": "2025-07-31T21:56:51.562667Z"}, {"name": "execute", "started_at": "2025-07-31T21:56:51.562862Z", "completed_at": "2025-07-31T21:56:51.577111Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.016860008239746094, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sbdk_project.stg_users", "compiled": true, "compiled_code": "\n\nwith source_data as (\n    select * from \"dev\".\"main\".\"raw_users\"\n),\n\ncleaned as (\n    select\n        user_id,\n        username,\n        email,\n        first_name,\n        last_name,\n        created_at,\n        updated_at,\n        country,\n        city,\n        subscription_tier,\n        referrer,\n        is_active,\n        date_of_birth,\n        phone,\n        company,\n        job_title,\n        \n        -- Calculated fields\n        case \n            when date_of_birth is not null \n            then date_diff('year', date_of_birth, current_date)\n            else null \n        end as age,\n        \n        case \n            when subscription_tier in ('premium', 'enterprise') then true\n            else false \n        end as is_paid_subscriber,\n        \n        date_diff('day', created_at, current_date) as days_since_signup,\n        \n        -- Data quality flags\n        case \n            when email is null or email = '' then false\n            when first_name is null or first_name = '' then false  \n            when last_name is null or last_name = '' then false\n            else true \n        end as has_complete_profile\n        \n    from source_data\n)\n\nselect * from cleaned", "relation_name": "\"dev\".\"main\".\"stg_users\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-31T21:56:51.579320Z", "completed_at": "2025-07-31T21:56:51.581765Z"}, {"name": "execute", "started_at": "2025-07-31T21:56:51.581978Z", "completed_at": "2025-07-31T21:56:51.598625Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02003192901611328, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sbdk_project.int_user_activity", "compiled": true, "compiled_code": "\n\nwith users as (\n    select * from \"dev\".\"main\".\"stg_users\"\n),\n\nevents as (\n    select * from \"dev\".\"main\".\"stg_events\"\n),\n\norders as (\n    select * from \"dev\".\"main\".\"stg_orders\"\n),\n\nuser_events as (\n    select\n        user_id,\n        count(*) as total_events,\n        count(*) filter (where event_type = 'page_view') as pageviews,\n        count(*) filter (where event_type = 'click') as clicks,\n        count(*) filter (where event_type = 'signup') as signups,\n        count(*) filter (where event_type = 'login') as logins,\n        count(*) filter (where event_type = 'purchase') as purchase_events,\n        count(*) filter (where is_conversion_event = true) as conversion_events,\n        count(*) filter (where is_revenue_event = true) as revenue_events,\n        coalesce(sum(revenue), 0) as total_event_revenue,\n        coalesce(sum(duration_seconds), 0) as total_time_on_site,\n        count(distinct session_id) filter (where session_id is not null) as unique_sessions,\n        count(distinct event_date) as active_days,\n        min(timestamp) as first_event_at,\n        max(timestamp) as last_event_at,\n        count(distinct traffic_category) as traffic_sources_used\n    from events\n    group by user_id\n),\n\nuser_orders as (\n    select\n        user_id,\n        count(*) as total_orders,\n        count(*) filter (where is_completed = true) as completed_orders,\n        count(*) filter (where is_failed = true) as failed_orders,\n        count(*) filter (where is_recurring = true) as recurring_orders,\n        coalesce(sum(total_amount) filter (where is_completed = true), 0) as total_order_revenue,\n        coalesce(avg(total_amount) filter (where is_completed = true), 0) as avg_order_value,\n        coalesce(sum(discount_amount), 0) as total_discounts_used,\n        count(distinct product_category) as product_categories_purchased,\n        min(created_at) as first_order_at,\n        max(created_at) as last_order_at,\n        count(distinct payment_method) as payment_methods_used\n    from orders\n    group by user_id\n),\n\ncombined as (\n    select\n        u.user_id,\n        u.username,\n        u.email,\n        u.first_name,\n        u.last_name,\n        u.created_at as user_created_at,\n        u.country,\n        u.city,\n        u.subscription_tier,\n        u.referrer,\n        u.is_active,\n        u.age,\n        u.is_paid_subscriber,\n        u.days_since_signup,\n        u.has_complete_profile,\n        \n        -- Event metrics\n        coalesce(e.total_events, 0) as total_events,\n        coalesce(e.pageviews, 0) as pageviews,\n        coalesce(e.clicks, 0) as clicks,\n        coalesce(e.signups, 0) as signups,\n        coalesce(e.logins, 0) as logins,\n        coalesce(e.purchase_events, 0) as purchase_events,\n        coalesce(e.conversion_events, 0) as conversion_events,\n        coalesce(e.revenue_events, 0) as revenue_events,\n        coalesce(e.total_event_revenue, 0) as total_event_revenue,\n        coalesce(e.total_time_on_site, 0) as total_time_on_site,\n        coalesce(e.unique_sessions, 0) as unique_sessions,\n        coalesce(e.active_days, 0) as active_days,\n        e.first_event_at,\n        e.last_event_at,\n        coalesce(e.traffic_sources_used, 0) as traffic_sources_used,\n        \n        -- Order metrics\n        coalesce(o.total_orders, 0) as total_orders,\n        coalesce(o.completed_orders, 0) as completed_orders,\n        coalesce(o.failed_orders, 0) as failed_orders,\n        coalesce(o.recurring_orders, 0) as recurring_orders,\n        coalesce(o.total_order_revenue, 0) as total_order_revenue,\n        coalesce(o.avg_order_value, 0) as avg_order_value,\n        coalesce(o.total_discounts_used, 0) as total_discounts_used,\n        coalesce(o.product_categories_purchased, 0) as product_categories_purchased,\n        o.first_order_at,\n        o.last_order_at,\n        coalesce(o.payment_methods_used, 0) as payment_methods_used,\n        \n        -- Calculated metrics\n        case \n            when e.pageviews > 0 and o.completed_orders > 0 \n            then round(o.completed_orders::float / e.pageviews * 100, 2)\n            else 0 \n        end as purchase_conversion_rate,\n        \n        case \n            when e.total_events > 0 \n            then round(e.conversion_events::float / e.total_events * 100, 2)\n            else 0 \n        end as event_conversion_rate,\n        \n        case \n            when e.unique_sessions > 0 \n            then round(e.total_events::float / e.unique_sessions, 2)\n            else 0 \n        end as events_per_session,\n        \n        case \n            when u.days_since_signup > 0 and e.active_days > 0\n            then round(e.active_days::float / u.days_since_signup * 100, 2)\n            else 0 \n        end as activity_frequency_percentage,\n        \n        -- Total combined revenue\n        coalesce(e.total_event_revenue, 0) + coalesce(o.total_order_revenue, 0) as total_revenue,\n        \n        -- User activity classification\n        case \n            when o.completed_orders > 0 then 'customer'\n            when e.signups > 0 then 'signed_up'\n            when e.total_events > 10 then 'engaged_visitor'\n            when e.total_events > 0 then 'visitor'\n            else 'inactive'\n        end as user_type\n        \n    from users u\n    left join user_events e on u.user_id = e.user_id\n    left join user_orders o on u.user_id = o.user_id\n)\n\nselect * from combined", "relation_name": "\"dev\".\"main\".\"int_user_activity\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-07-31T21:56:51.601499Z", "completed_at": "2025-07-31T21:56:51.603810Z"}, {"name": "execute", "started_at": "2025-07-31T21:56:51.604017Z", "completed_at": "2025-07-31T21:56:51.710106Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.1093440055847168, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.sbdk_project.user_metrics", "compiled": true, "compiled_code": "\n\nwith user_activity as (\n    select * from \"dev\".\"main\".\"int_user_activity\"\n),\n\nfinal as (\n    select\n        user_id,\n        username,\n        email,\n        first_name,\n        last_name,\n        user_created_at,\n        country,\n        city,\n        subscription_tier,\n        referrer,\n        is_active,\n        age,\n        is_paid_subscriber,\n        days_since_signup,\n        has_complete_profile,\n        \n        -- Engagement metrics\n        total_events,\n        pageviews,\n        clicks,\n        logins,\n        unique_sessions,\n        active_days,\n        traffic_sources_used,\n        events_per_session,\n        activity_frequency_percentage,\n        total_time_on_site,\n        \n        -- Conversion metrics\n        signups,\n        purchase_events,\n        conversion_events,\n        purchase_conversion_rate,\n        event_conversion_rate,\n        \n        -- Revenue metrics\n        total_orders,\n        completed_orders,\n        failed_orders,\n        recurring_orders,\n        total_order_revenue,\n        total_event_revenue,\n        total_revenue,\n        avg_order_value,\n        total_discounts_used,\n        product_categories_purchased,\n        payment_methods_used,\n        \n        -- Timing metrics\n        first_event_at,\n        last_event_at,\n        first_order_at,\n        last_order_at,\n        \n        -- User classification\n        user_type,\n        \n        -- Customer lifetime value estimate\n        case \n            when recurring_orders > 0 and days_since_signup > 0\n            then round(total_revenue * (365.0 / days_since_signup) * 2, 2)  -- Rough 2-year CLV estimate\n            else total_revenue \n        end as estimated_clv,\n        \n        -- Engagement score (0-100)\n        least(100, \n            (case when active_days > 0 then least(25, active_days) else 0 end) +\n            (case when unique_sessions > 0 then least(25, unique_sessions) else 0 end) +\n            (case when total_events > 0 then least(25, least(25, total_events / 10)) else 0 end) +\n            (case when completed_orders > 0 then 25 else 0 end)\n        ) as engagement_score,\n        \n        -- Risk classification\n        case \n            when last_event_at < current_date - interval '90 days' and total_orders > 0 then 'churn_risk'\n            when last_event_at < current_date - interval '30 days' and user_type = 'customer' then 'at_risk'\n            when activity_frequency_percentage < 10 and days_since_signup > 30 then 'low_engagement'\n            when user_type = 'customer' and recurring_orders = 0 then 'one_time_buyer'\n            when user_type = 'customer' and recurring_orders > 0 then 'loyal_customer'\n            when user_type = 'engaged_visitor' then 'potential_customer'\n            else 'standard'\n        end as risk_category,\n        \n        -- Value tier\n        case \n            when total_revenue >= 1000 then 'high_value'\n            when total_revenue >= 500 then 'medium_value'\n            when total_revenue >= 100 then 'low_value'\n            when total_revenue > 0 then 'minimal_value'\n            else 'no_value'\n        end as value_tier,\n        \n        -- Recency, Frequency, Monetary (RFM) components\n        case \n            when last_order_at >= current_date - interval '30 days' then 5\n            when last_order_at >= current_date - interval '60 days' then 4\n            when last_order_at >= current_date - interval '90 days' then 3\n            when last_order_at >= current_date - interval '180 days' then 2\n            when last_order_at is not null then 1\n            else 0\n        end as recency_score,\n        \n        case \n            when completed_orders >= 10 then 5\n            when completed_orders >= 5 then 4\n            when completed_orders >= 3 then 3\n            when completed_orders >= 2 then 2\n            when completed_orders >= 1 then 1\n            else 0\n        end as frequency_score,\n        \n        case \n            when total_revenue >= 1000 then 5\n            when total_revenue >= 500 then 4\n            when total_revenue >= 200 then 3\n            when total_revenue >= 50 then 2\n            when total_revenue > 0 then 1\n            else 0\n        end as monetary_score,\n        \n        -- Data freshness\n        current_timestamp as updated_at\n        \n    from user_activity\n)\n\nselect * from final", "relation_name": "\"dev\".\"main\".\"user_metrics\"", "batch_results": null}], "elapsed_time": 0.4457528591156006, "args": {"log_level": "info", "static_parser": true, "empty": false, "cache_selected_only": false, "log_level_file": "debug", "show_all_deprecations": false, "invocation_command": "dbt run --project-dir dbt --profiles-dir /Users/mattstrautmann/.dbt", "which": "run", "source_freshness_run_project_hooks": true, "indirect_selection": "eager", "select": [], "populate_cache": true, "log_format": "default", "require_nested_cumulative_type_params": false, "version_check": true, "state_modified_compare_more_unrendered_values": false, "write_json": true, "partial_parse_file_diff": true, "state_modified_compare_vars": false, "introspect": true, "log_format_file": "debug", "vars": {}, "require_generic_test_arguments_property": false, "partial_parse": true, "use_colors_file": true, "log_path": "dbt/logs", "require_explicit_package_overrides_for_builtin_materializations": true, "defer": false, "printer_width": 80, "project_dir": "dbt", "warn_error_options": {"error": [], "warn": [], "silence": []}, "require_yaml_configuration_for_mf_time_spines": false, "require_all_warnings_handled_by_warn_error": false, "show_resource_report": false, "require_batched_execution_for_custom_microbatch_strategy": false, "send_anonymous_usage_stats": true, "print": true, "validate_macro_args": false, "skip_nodes_if_on_run_start_fails": false, "strict_mode": false, "macro_debugging": false, "use_fast_test_edges": false, "log_file_max_bytes": 10485760, "profiles_dir": "/Users/mattstrautmann/.dbt", "favor_state": false, "quiet": false, "require_resource_names_without_spaces": true, "exclude": [], "upload_to_artifacts_ingest_api": false, "use_colors": true}}